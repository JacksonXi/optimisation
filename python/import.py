# -*- coding: utf-8 -*-
"""import.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13c0PklTN3aAr3D_AUN0zxkT6c6T8eUkF
"""

import shutil
import sys
import os.path
import numpy as np
import pandas as pd

if not shutil.which("pyomo"):
    !pip install -q pyomo
    assert(shutil.which("pyomo"))

if not (shutil.which("cbc") or os.path.isfile("cbc")):
    if "google.colab" in sys.modules:
        !apt-get install -y -qq coinor-cbc
    else:
        try:
            !conda install -c conda-forge coincbc 
        except:
            pass

assert(shutil.which("cbc") or os.path.isfile("cbc"))
    
from pyomo.environ import *

!git clone https://github.com/JacksonXi/optimisation

cd /content/optimisation/import

"""**Generated energy < non-controlable energy**



"""

Flexibleindex = pd.read_csv("flexibleIndex.csv")
Flexibleindex

"""**Obtain consumer ID**"""

Consumer = list(Flexibleindex['Unnamed: 0'])
Consumer1 = list(Flexibleindex['Unnamed: 0'])
Consumer

flexibleindex = pd.read_csv("flexibleIndex.csv", index_col=0)
print(flexibleindex)

"""**Obtain flexibleindex during peak hours**

**0: ON**

**1: OFF**
"""

power = pd.read_csv('power.csv', index_col=0)
power

bid = pd.read_csv('bid.csv', index_col=0)
bid

demand = pd.read_csv('demand.csv', index_col=0)
demand

"""**Sorting the bid**"""

n = len(bid)
consumer = [] 
while n != 0:
    max = Consumer[0]
    for i in range(0,n):
      if bid['bid'][max] < bid['bid'][Consumer[i]]:
          max = Consumer[i]
      else:
          max = max
    consumer.append(max)      
    Consumer.remove(max)
    n -= 1
print(Consumer)
print(consumer)

generatedEnergy = pd.read_csv('generated energy.csv')
Prosumer = list(generatedEnergy['Unnamed: 0'])
Prosumer1 = list(generatedEnergy['Unnamed: 0'])
Prosumer

"""**Sorting the storage energy**"""

generated_energy = pd.read_csv('generated energy.csv', index_col=0)
generated_energy

n = len(generated_energy)
prosumer = [] 
while n != 0:
    max = Prosumer[0]
    for i in range(0,n):
      if generated_energy['generated energy'][max] < generated_energy['generated energy'][Prosumer[i]]:
          max = Prosumer[i]
      else:
          max = max
    prosumer.append(max)      
    Prosumer.remove(max)
    n -= 1
print(prosumer)
print(Prosumer)

appliances = list(flexibleindex.keys())
appliances

"""**Energy is allocated in the order of the bid amount**"""

model = ConcreteModel()
model.dual = Suffix(direction=Suffix.IMPORT)

model.transport = Var(prosumer, consumer , domain = NonNegativeReals)

model.revenue = Objective(expr = sum(model.transport[p, c]*bid['bid'][c] for p in prosumer for c in consumer), 
                           sense = maximize)

model.supply = ConstraintList()
for p in prosumer:
      model.supply.add(sum(model.transport[p, c] for c in consumer) <= generated_energy['generated energy'][p])

model.demand = ConstraintList()
for c in consumer:
      model.demand.add(sum(model.transport[p, c] for p in prosumer) <= demand['demand'][c])

results = SolverFactory('cbc').solve(model)
results.write()

model.pprint()

for p in prosumer:
    for c in consumer:
        print(p, c, model.transport[p,c]())

if 'ok' == str(results.Solver.status):
    print("Total Community Revenue = ",model.revenue())
    print("\nTransport Table:")
    for p in Prosumer1:
        for c in Consumer1:
            if model.transport[p,c]() > 0:
                print("Transport from ", p," to ", c, ":", model.transport[p,c]())
else:
    print("No Valid Solution Found")

n = 0
if 'ok' == str(results.Solver.status):
    print("Personal Revenue:\n")
    for p in prosumer:
        for c in consumer:
            if model.transport[p,c]() > 0:
                print("Balance from ", c," to ", p, ":", model.transport[p,c]() * bid['bid'][c])
else:
    print("No Valid Solution Found")

n = 0
if 'ok' == str(results.Solver.status):
    print("Personal Revenue:\n")
    for p in prosumer:
      for c in consumer:
          n += model.transport[p, c]() * bid['bid'][c] 
      print("The revenue of",p ,":" , n)
      n = 0
else:
    print("No Valid Solution Found")

n = 0
if 'ok' == str(results.Solver.status):
    print("The imported electricity form the grid:\n")
    for c in consumer:
        n = demand['demand'][c]
        for p in prosumer:
            n -= model.transport[p, c]()
        if n > 0 :
            print(c, "needs to import ",n , "KWh")

n = 0
if 'ok' == str(results.Solver.status):
    print("Personal Revenue:\n")
    for c in Consumer1:
      for p in Prosumer1:
          n += model.transport[p, c]()
      print("The received energy of",c ,":" , n)
      n = 0
else:
    print("No Valid Solution Found")